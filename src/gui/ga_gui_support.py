#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# Support module generated by PAGE version 5.1
#  in conjunction with Tcl version 8.6
#    Apr 21, 2020 12:06:47 PM CEST  platform: Windows NT

import sys

try:
    import Tkinter as tk
except ImportError:
    import tkinter as tk

try:
    import ttk
    py3 = False
except ImportError:
    import tkinter.ttk as ttk
    py3 = True

def set_Tk_var():
    global spinbox_function
    spinbox_function = tk.StringVar()
    global spinbox_selection
    spinbox_selection = tk.StringVar()
    global spinbox_crossover
    spinbox_crossover = tk.StringVar()
    global spinbox_mutation
    spinbox_mutation = tk.StringVar()
    global che90
    che90 = tk.IntVar()
    global che91
    che91 = tk.IntVar()
    global che120
    che120 = tk.IntVar()
    global crossover_prob
    crossover_prob = tk.DoubleVar()
    global mutation_prob
    mutation_prob = tk.DoubleVar()
    global mutation_n
    mutation_n = tk.IntVar()
    global inversion_prob
    inversion_prob = tk.DoubleVar()
    global survival_rate
    survival_rate = tk.DoubleVar()
    global precision
    precision = tk.DoubleVar()
    global epochs_n
    epochs_n = tk.IntVar()
    global pop_size
    pop_size = tk.IntVar()

def init(top, gui, *args, **kwargs):
    global w, top_level, root
    w = gui
    top_level = top
    root = top
    global config_settings
    config_settings = []

def runOptimiser(args):
    from src.logic.Target_function import function
    from src.logic.Optimizer import Optimizer
    # GENEREAL TEST
    opt_test = Optimizer(target=function, args_num=2, x1_range=args[1], x2_range=args[2],
                         precision=args[5], epochs=args[3], population_size=args[4], type=0)

    # opt_test.initPopulation()

    opt_test.optimize(selection=(args[8], args[9]),
                      crossover=(args[10], args[11]),
                      mutation=(args[12], args[13], args[14]),
                      inversion_prob=args[15],
                      elitism=args[16], survival_rate=args[17])

    best = opt_test.getBest()
    print("found solution : best : ", best.get('chromosome').decode(), best.get('chromosome').getTargetValue(),
          'mean : ', best.get('mean'), ' variance : ', best.get('variance'), ' std : ', best.get('std'),
          ' mae : ', best.get('mae'), ' time : ', best.get('time'), ' epoch : ', best.get('epoch'))

    opt_test.getMetrics()

    # w.Canvas1.pack(expand=True, fill=BOTH)
    w.Canvas1.pack(fill=tk.BOTH, expand=1)
    plot_img = tk.PhotoImage(file='plots/best.png')
    # print('plots/best_target_vals_per_epoch_'+opt_test.instance_info+'.png')
    w.Canvas1.create_image(0, 30, image=plot_img, anchor=tk.NW)

    w.Label15_13.config(text=str(best.get('time')))
    x1, x2 = best.get('chromosome').decode()
    w.Label15_14.config(text='(x1,y1)=('+str(round(x1, 5)) + ',' + str(round(x2, 5)) + '), y=' + str(best.get('chromosome').getTargetValue()))
    w.Label15_15.config(text=str(best.get('mean')) + '+/-' + str(best.get('std')))
    w.Label15_7.config(text=str(best.get('mae')))

    tk.mainloop()

    opt_test.reset()

def defaultConfig():
    return ['MCCORMICK', '-1.5,4', '-3,4',
            100, 20, 6, 1, 0,
            'tournament', 0.2,
            'threepoint', 0.7,
            'any', 3, 0.3,
            0.05,
            1, 0.1]

def validateInput(input, typeToCast, index, obj):
    # print('log : input validation input : ', input, ' typeToCast : ', typeToCast, ' index : ', index)
    validated_input = None
    try:
        validated_input = typeToCast(input)
        if input is None :
            raise Exception("None value provided for casting")
    except Exception as e:
        print('log : exception in input validation : ', e, ' : input : ', input, ' typeToCast : ', typeToCast, ' index : ', index)
        validated_input = defaultConfig()[index]

        if type(obj) is tk.Entry:
            # print("validated_input : ", validated_input)
            obj.insert(0, str(validated_input))
        # if type(obj) is tk.Checkbutton :
        #     obj.set()
    finally:
        # print ('finally validated input : ', validated_input)
        return validated_input

def run(p1):
    print('log : RUN Request from gui')
    sys.stdout.flush()

    config_settings = []
    counter = 0;

    # function
    config_settings.append(validateInput(w.Spinbox1_10.get(), str, counter, w.Spinbox1_10))
    counter += 1
    config_settings.append(
        tuple(
            [int(float(x)) for x in (
                validateInput(
                    None if w.Entry1.get() == '' else w.Entry1.get(), str, counter, w.Entry1)
                    .split(','))]))
    counter += 1
    config_settings.append(
        tuple(
            [int(float(x)) for x in (
                validateInput(
                    None if w.Entry2.get() == '' else w.Entry2.get(), str, counter, w.Entry2)
                    .split(','))]))
    counter += 1

    # environment
    config_settings.append(validateInput(w.Entry3.get(), int, counter, w.Entry3))
    counter += 1
    config_settings.append(validateInput(w.Entry4.get(), int, counter, w.Entry4))
    counter += 1
    config_settings.append(validateInput(w.Entry5.get(), int, counter, w.Entry5))
    counter += 1
    config_settings.append(validateInput(che90.get(), int, counter, che90))
    counter += 1
    config_settings.append(validateInput(che91.get(), int, counter, che91))
    counter += 1

    # optimizer
    config_settings.append(validateInput(w.Spinbox1_11.get(), str, counter, w.Spinbox1_11))
    counter += 1
    config_settings.append(validateInput(w.Entry7.get(), float, counter, w.Entry7))
    counter += 1
    config_settings.append(validateInput(w.Spinbox1_12.get(), str, counter, w.Spinbox1_12))
    counter += 1
    config_settings.append(validateInput(w.Entry6_11.get(), float, counter, w.Entry6_11))
    counter += 1
    config_settings.append(validateInput(w.Spinbox1_1.get(), str, counter, w.Spinbox1_1))
    counter += 1
    config_settings.append(validateInput(w.Entry7_10.get(), int, counter, w.Entry7_10))
    counter += 1
    config_settings.append(validateInput(w.Entry6_12.get(), float, counter, w.Entry6_12))
    counter += 1
    config_settings.append(validateInput(w.Entry6.get(), float, counter, w.Entry6))
    counter += 1
    config_settings.append(validateInput(che120.get(), int, counter, che120))
    counter += 1
    config_settings.append(validateInput(w.Entry6_2.get(), float, counter, w.Entry6_2))
    counter += 1

    print("log : fetching inputs into local structures : counter : ", counter)
    print("log : featched configuration : ", config_settings)

    runOptimiser(config_settings)




def destroy_window():
    # Function which closes the window.
    global top_level
    top_level.destroy()
    top_level = None

# if __name__ == '__main__':
#     import ga_gui
#     ga_gui.vp_start_gui()




